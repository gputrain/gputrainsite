{
  
    
        "post0": {
            "title": "Urban Sounds 8k Classification with Hugging Face Demo",
            "content": "Hugging Face Demo . Here is a demo of what this model at Hugging Face : Urban Sound 8K Classification . Background . Urban Sounds is a dataset of 8732 labeled sounds of less than 4 seconds each from 10 classes. Dataset for UrbanSounds8K contains these 10 classes: . air_conditioner | car_horn | children_playing | dog_bark | drilling | engine_idling | gun_shot | jackhammer | siren | street_music | Research with this dataset as of 2019 and optimized ML approaches as of late 2019 had classification accuracy at 74% with a k-nearest neighbours (KNN) algorithm. A deep learning neural network trained from scratch obtained accuracy at 76% accuracy. . . (accuracy metrics for research article) . The state-of-the-art methods for audio classification approach this problem as an image classification task. For such image classification problems from audio samples, three common transformation approaches are: . Linear Spectrograms | | Log Spectrograms | | Mel Spectrograms | | . You can learn more about these three transformations in Scott Duda&#39;s article and Ketan Doshi&#39;s writing, reasoning why Mel Spectrograms perform better in general for visual transformations of audio files. . The transformation on these audio files is another notebook that I will add a write-up here. You can find all of the associated code here. . Code . Import the necessary modules . Using an AWS conda_pytorch_p38 environment with a ml.g4dn.2xlarge machine type . # !pip install librosa # !pip install fastbook # !pip install gradio . . import pandas as pd from fastai.vision.all import * from fastai.data.all import * import matplotlib.pyplot as plt from matplotlib.pyplot import specgram import librosa import librosa.display import numpy as np from pathlib import Path import os import random import IPython from tqdm import tqdm from sklearn.metrics import accuracy_score import gradio as gr from collections import OrderedDict . . Custom Labelling Function For Classification . This function reads the categorisation information into a dictionary and then uses that filename lookup to recognise the class of a particular image . df = pd.read_csv(&#39;UrbanSound8K/metadata/UrbanSound8K.csv&#39;) #classification information across folds as provided from Urbansounds df[&#39;fname&#39;] = df[[&#39;slice_file_name&#39;,&#39;fold&#39;]].apply (lambda x: str(x[&#39;slice_file_name&#39;][:-4])+&#39;.png&#39;.strip(),axis=1 ) my_dict = dict(zip(df.fname,df[&#39;class&#39;])) def label_func(f_name): f_name = str(f_name).split(&#39;/&#39;)[-1:][0] return my_dict[f_name] . . File distribution across the folds . df.groupby([&#39;fold&#39;]).classID.count().sort_values(ascending=False).plot.bar() plt.ylabel(&#39;Files in each fold&#39;) plt.title(&#39;Files in each fold&#39;) . . Text(0.5, 1.0, &#39;Files in each fold&#39;) . Class distribution across the sound types . df.groupby(&#39;class&#39;).classID.count().sort_values(ascending=False).plot.bar() plt.ylabel(&#39;count&#39;) plt.title(&#39;Class distribution in the dataset&#39;) . . Text(0.5, 1.0, &#39;Class distribution in the dataset&#39;) . Model Build . Spider through all the folders for images (transformation of sound to melspectrograms is another notebook). . all_folds = list(np.arange(1,11)) all_folders = [str(i) for i in all_folds] image_files_loc = &#39;UrbanSoundTransforms/mel_spectrogram/&#39; all_files = get_image_files(image_files_loc,recurse=True, folders =all_folders ) . . Datablock with an 80-20 Random split on entire dataset . dblock = DataBlock(blocks=(ImageBlock,CategoryBlock), get_y = label_func, splitter = RandomSplitter(seed=1), ) dl = dblock.dataloaders(all_files) print (&#39;Train has {0} images and test has {1} images.&#39; .format(len(dl.train_ds),len(dl.valid_ds))) learn = vision_learner(dl, resnet34, metrics=accuracy) learn.fine_tune(3) . . Train has 6986 images and test has 1746 images. . epoch train_loss valid_loss accuracy time . 0 | 1.510322 | 0.698512 | 0.781787 | 00:31 | . epoch train_loss valid_loss accuracy time . 0 | 0.615340 | 0.356023 | 0.888889 | 00:39 | . 1 | 0.270150 | 0.213896 | 0.932990 | 00:40 | . 2 | 0.084770 | 0.181070 | 0.943299 | 00:40 | . Export the model . learn.export() . .",
            "url": "https://www.gputrain.com/sound/hugging%20face/fastai/2022/05/23/Urban-Sounds-8k-Classification-with-Hugging-Face-Demo.html",
            "relUrl": "/sound/hugging%20face/fastai/2022/05/23/Urban-Sounds-8k-Classification-with-Hugging-Face-Demo.html",
            "date": " • May 23, 2022"
        }
        
    
  
    
        ,"post1": {
            "title": "Fastpages Notebook Blog Post",
            "content": "About . This notebook is a demonstration of some of capabilities of fastpages with notebooks. . With fastpages you can save your jupyter notebooks into the _notebooks folder at the root of your repository, and they will be automatically be converted to Jekyll compliant blog posts! . Front Matter . The first cell in your Jupyter Notebook or markdown blog post contains front matter. Front matter is metadata that can turn on/off options in your Notebook. It is formatted like this: . # &quot;My Title&quot; &gt; &quot;Awesome summary&quot; - toc:true- branch: master - badges: true - comments: true - author: Hamel Husain &amp; Jeremy Howard - categories: [fastpages, jupyter] . Setting toc: true will automatically generate a table of contents | Setting badges: true will automatically include GitHub and Google Colab links to your notebook. | Setting comments: true will enable commenting on your blog post, powered by utterances. | . The title and description need to be enclosed in double quotes only if they include special characters such as a colon. More details and options for front matter can be viewed on the front matter section of the README. . Markdown Shortcuts . A #hide comment at the top of any code cell will hide both the input and output of that cell in your blog post. . A #hide_input comment at the top of any code cell will only hide the input of that cell. . The comment #hide_input was used to hide the code that produced this. . put a #collapse-hide flag at the top of any cell if you want to hide that cell by default, but give the reader the option to show it: . import pandas as pd import altair as alt . . put a #collapse-show flag at the top of any cell if you want to show that cell by default, but give the reader the option to hide it: . cars = &#39;https://vega.github.io/vega-datasets/data/cars.json&#39; movies = &#39;https://vega.github.io/vega-datasets/data/movies.json&#39; sp500 = &#39;https://vega.github.io/vega-datasets/data/sp500.csv&#39; stocks = &#39;https://vega.github.io/vega-datasets/data/stocks.csv&#39; flights = &#39;https://vega.github.io/vega-datasets/data/flights-5k.json&#39; . . place a #collapse-output flag at the top of any cell if you want to put the output under a collapsable element that is closed by default, but give the reader the option to open it: . print(&#39;The comment #collapse-output was used to collapse the output of this cell by default but you can expand it.&#39;) . The comment #collapse-output was used to collapse the output of this cell by default but you can expand it. . . Interactive Charts With Altair . Charts made with Altair remain interactive. Example charts taken from this repo, specifically this notebook. . Example 1: DropDown . # use specific hard-wired values as the initial selected values selection = alt.selection_single( name=&#39;Select&#39;, fields=[&#39;Major_Genre&#39;, &#39;MPAA_Rating&#39;], init={&#39;Major_Genre&#39;: &#39;Drama&#39;, &#39;MPAA_Rating&#39;: &#39;R&#39;}, bind={&#39;Major_Genre&#39;: alt.binding_select(options=genres), &#39;MPAA_Rating&#39;: alt.binding_radio(options=mpaa)} ) # scatter plot, modify opacity based on selection alt.Chart(df).mark_circle().add_selection( selection ).encode( x=&#39;Rotten_Tomatoes_Rating:Q&#39;, y=&#39;IMDB_Rating:Q&#39;, tooltip=&#39;Title:N&#39;, opacity=alt.condition(selection, alt.value(0.75), alt.value(0.05)) ) . Example 2: Tooltips . alt.Chart(df).mark_circle().add_selection( alt.selection_interval(bind=&#39;scales&#39;, encodings=[&#39;x&#39;]) ).encode( alt.X(&#39;Rotten_Tomatoes_Rating&#39;, type=&#39;quantitative&#39;), alt.Y(&#39;IMDB_Rating&#39;, type=&#39;quantitative&#39;, axis=alt.Axis(minExtent=30)), # y=alt.Y(&#39;IMDB_Rating:Q&#39;, ), # use min extent to stabilize axis title placement tooltip=[&#39;Title:N&#39;, &#39;Release_Date:N&#39;, &#39;IMDB_Rating:Q&#39;, &#39;Rotten_Tomatoes_Rating:Q&#39;] ).properties( width=500, height=400 ) . Example 3: More Tooltips . label = alt.selection_single( encodings=[&#39;x&#39;], # limit selection to x-axis value on=&#39;mouseover&#39;, # select on mouseover events nearest=True, # select data point nearest the cursor empty=&#39;none&#39; # empty selection includes no data points ) # define our base line chart of stock prices base = alt.Chart().mark_line().encode( alt.X(&#39;date:T&#39;), alt.Y(&#39;price:Q&#39;, scale=alt.Scale(type=&#39;log&#39;)), alt.Color(&#39;symbol:N&#39;) ) alt.layer( base, # base line chart # add a rule mark to serve as a guide line alt.Chart().mark_rule(color=&#39;#aaa&#39;).encode( x=&#39;date:T&#39; ).transform_filter(label), # add circle marks for selected time points, hide unselected points base.mark_circle().encode( opacity=alt.condition(label, alt.value(1), alt.value(0)) ).add_selection(label), # add white stroked text to provide a legible background for labels base.mark_text(align=&#39;left&#39;, dx=5, dy=-5, stroke=&#39;white&#39;, strokeWidth=2).encode( text=&#39;price:Q&#39; ).transform_filter(label), # add text labels for stock prices base.mark_text(align=&#39;left&#39;, dx=5, dy=-5).encode( text=&#39;price:Q&#39; ).transform_filter(label), data=stocks ).properties( width=500, height=400 ) . Data Tables . You can display tables per the usual way in your blog: . df[[&#39;Title&#39;, &#39;Worldwide_Gross&#39;, &#39;Production_Budget&#39;, &#39;Distributor&#39;, &#39;MPAA_Rating&#39;, &#39;IMDB_Rating&#39;, &#39;Rotten_Tomatoes_Rating&#39;]].head() . Title Worldwide_Gross Production_Budget Distributor MPAA_Rating IMDB_Rating Rotten_Tomatoes_Rating . 0 The Land Girls | 146083.0 | 8000000.0 | Gramercy | R | 6.1 | NaN | . 1 First Love, Last Rites | 10876.0 | 300000.0 | Strand | R | 6.9 | NaN | . 2 I Married a Strange Person | 203134.0 | 250000.0 | Lionsgate | None | 6.8 | NaN | . 3 Let&#39;s Talk About Sex | 373615.0 | 300000.0 | Fine Line | None | NaN | 13.0 | . 4 Slam | 1087521.0 | 1000000.0 | Trimark | R | 3.4 | 62.0 | . Images . Local Images . You can reference local images and they will be copied and rendered on your blog automatically. You can include these with the following markdown syntax: . ![](my_icons/fastai_logo.png) . . Remote Images . Remote images can be included with the following markdown syntax: . ![](https://image.flaticon.com/icons/svg/36/36686.svg) . . Animated Gifs . Animated Gifs work, too! . ![](https://upload.wikimedia.org/wikipedia/commons/7/71/ChessPawnSpecialMoves.gif) . . Captions . You can include captions with markdown images like this: . ![](https://www.fast.ai/images/fastai_paper/show_batch.png &quot;Credit: https://www.fast.ai/2020/02/13/fastai-A-Layered-API-for-Deep-Learning/&quot;) . . Other Elements . GitHub Flavored Emojis . Typing I give this post two :+1:! will render this: . I give this post two :+1:! . Tweetcards . Typing &gt; twitter: https://twitter.com/jakevdp/status/1204765621767901185?s=20 will render this: Altair 4.0 is released! https://t.co/PCyrIOTcvvTry it with: pip install -U altairThe full list of changes is at https://t.co/roXmzcsT58 ...read on for some highlights. pic.twitter.com/vWJ0ZveKbZ . &mdash; Jake VanderPlas (@jakevdp) December 11, 2019 . Youtube Videos . Typing &gt; youtube: https://youtu.be/XfoYk_Z5AkI will render this: . Boxes / Callouts . Typing &gt; Warning: There will be no second warning! will render this: . Warning: There will be no second warning! . Typing &gt; Important: Pay attention! It&#39;s important. will render this: . Important: Pay attention! It&#8217;s important. . Typing &gt; Tip: This is my tip. will render this: . Tip: This is my tip. . Typing &gt; Note: Take note of this. will render this: . Note: Take note of this. . Typing &gt; Note: A doc link to [an example website: fast.ai](https://www.fast.ai/) should also work fine. will render in the docs: . Note: A doc link to an example website: fast.ai should also work fine. . Footnotes . You can have footnotes in notebooks, however the syntax is different compared to markdown documents. This guide provides more detail about this syntax, which looks like this: . For example, here is a footnote {% fn 1 %}. And another {% fn 2 %} {{ &#39;This is the footnote.&#39; | fndetail: 1 }} {{ &#39;This is the other footnote. You can even have a [link](www.github.com)!&#39; | fndetail: 2 }} . For example, here is a footnote 1. . And another 2 . 1. This is the footnote.↩ . 2. This is the other footnote. You can even have a link!↩ .",
            "url": "https://www.gputrain.com/jupyter/2020/02/20/test.html",
            "relUrl": "/jupyter/2020/02/20/test.html",
            "date": " • Feb 20, 2020"
        }
        
    
  

  
  

  
      ,"page1": {
          "title": "About Joe",
          "content": "Hello there. I am Joseph Matthew. . Welcome to my space, where I share some Jupyter notebook based experiments in my self-directed learning journey around machine learning and data wrangling. I enjoy developing solutions to real-world problems that leverage massive parallel architectures like the cloud, Apache Spark, and GPUs. . You can reach me on Twitter - @gputrain or LinkedIn. .",
          "url": "https://www.gputrain.com/about/",
          "relUrl": "/about/",
          "date": ""
      }
      
  

  

  
  

  

  
  

  

  
  

  
  

  
  

  
      ,"page10": {
          "title": "",
          "content": "Sitemap: {{ “sitemap.xml” | absolute_url }} | .",
          "url": "https://www.gputrain.com/robots.txt",
          "relUrl": "/robots.txt",
          "date": ""
      }
      
  

}